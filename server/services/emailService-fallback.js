const nodemailer = require('nodemailer');

// Fallback Email service with multiple providers
class EmailServiceFallback {
    constructor() {
        this.transporters = this.createTransporters();
        this.currentTransporterIndex = 0;
    }

    createTransporters() {
        const transporters = [];

        // Gmail SMTP (primary)
        if (process.env.EMAIL_USER && process.env.EMAIL_PASS) {
            transporters.push({
                name: 'Gmail',
                transporter: nodemailer.createTransporter({
                    host: 'smtp.gmail.com',
                    port: 587,
                    secure: false,
                    auth: {
                        user: process.env.EMAIL_USER,
                        pass: process.env.EMAIL_PASS
                    },
                    tls: {
                        rejectUnauthorized: false
                    }
                })
            });
        }

        // Ethereal Email (testing - always works)
        transporters.push({
            name: 'Ethereal (Test)',
            transporter: nodemailer.createTransporter({
                host: 'smtp.ethereal.email',
                port: 587,
                secure: false,
                auth: {
                    user: 'ethereal.user@ethereal.email',
                    pass: 'ethereal.pass'
                }
            })
        });

        return transporters;
    }

    async sendVerificationEmail(email, verificationCode, userName = 'Ng∆∞·ªùi d√πng') {
        // Try each transporter until one works
        for (let i = 0; i < this.transporters.length; i++) {
            const { name, transporter } = this.transporters[i];
            
            try {
                console.log(`üîÑ Trying ${name} email service...`);
                
                const mailOptions = {
                    from: {
                        name: 'Solar Analytics',
                        address: process.env.EMAIL_USER || 'noreply@solaranalytics.com'
                    },
                    to: email,
                    subject: 'üîê M√£ x√°c th·ª±c t√†i kho·∫£n Solar Analytics',
                    html: this.generateVerificationEmailHTML(verificationCode, userName)
                };

                const result = await transporter.sendMail(mailOptions);
                console.log(`‚úÖ ${name} email sent successfully:`, result.messageId);
                
                // If using test service, show preview URL
                if (name.includes('Test') && result.messageId) {
                    const previewUrl = nodemailer.getTestMessageUrl(result);
                    if (previewUrl) {
                        console.log(`üìß Preview email: ${previewUrl}`);
                    }
                }
                
                return { 
                    success: true, 
                    messageId: result.messageId,
                    provider: name,
                    previewUrl: name.includes('Test') ? nodemailer.getTestMessageUrl(result) : null
                };
                
            } catch (error) {
                console.error(`‚ùå ${name} failed:`, error.message);
                
                // If this is the last transporter, return error
                if (i === this.transporters.length - 1) {
                    return { 
                        success: false, 
                        error: `All email providers failed. Last error: ${error.message}`,
                        provider: name
                    };
                }
                // Otherwise, continue to next transporter
            }
        }
    }

    // Generate beautiful HTML email template
    generateVerificationEmailHTML(verificationCode, userName) {
        return `
        <!DOCTYPE html>
        <html lang="vi">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>M√£ x√°c th·ª±c Solar Analytics</title>
            <style>
                body {
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    line-height: 1.6;
                    margin: 0;
                    padding: 0;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                }
                .container {
                    max-width: 600px;
                    margin: 0 auto;
                    background: white;
                    border-radius: 15px;
                    overflow: hidden;
                    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                }
                .header {
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 40px 30px;
                    text-align: center;
                }
                .header h1 {
                    margin: 0;
                    font-size: 28px;
                    font-weight: 700;
                }
                .content {
                    padding: 40px 30px;
                }
                .verification-code {
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    font-size: 32px;
                    font-weight: bold;
                    text-align: center;
                    padding: 20px;
                    border-radius: 10px;
                    margin: 30px 0;
                    letter-spacing: 8px;
                    font-family: 'Courier New', monospace;
                }
                .footer {
                    background: #f8f9fa;
                    padding: 30px;
                    text-align: center;
                    color: #6c757d;
                    font-size: 14px;
                }
                .warning {
                    background: #fff3cd;
                    border: 1px solid #ffeaa7;
                    color: #856404;
                    padding: 15px;
                    border-radius: 8px;
                    margin: 20px 0;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üåû Solar Analytics</h1>
                    <p>X√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n</p>
                </div>
                
                <div class="content">
                    <h2>Xin ch√†o ${userName}!</h2>
                    <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n Solar Analytics. ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω, vui l√≤ng s·ª≠ d·ª•ng m√£ x√°c th·ª±c b√™n d∆∞·ªõi:</p>
                    
                    <div class="verification-code">
                        ${verificationCode}
                    </div>
                    
                    <p><strong>M√£ x√°c th·ª±c n√†y c√≥ hi·ªáu l·ª±c trong 10 ph√∫t.</strong></p>
                    
                    <div class="warning">
                        <strong>‚ö†Ô∏è L∆∞u √Ω b·∫£o m·∫≠t:</strong>
                        <ul style="margin: 10px 0; padding-left: 20px;">
                            <li>Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai</li>
                            <li>Solar Analytics s·∫Ω kh√¥ng bao gi·ªù y√™u c·∫ßu m√£ qua ƒëi·ªán tho·∫°i</li>
                            <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, vui l√≤ng b·ªè qua email</li>
                        </ul>
                    </div>
                    
                    <p>N·∫øu b·∫°n g·∫∑p kh√≥ khƒÉn, vui l√≤ng li√™n h·ªá ƒë·ªôi ng≈© h·ªó tr·ª£ c·ªßa ch√∫ng t√¥i.</p>
                    
                    <p>Tr√¢n tr·ªçng,<br><strong>ƒê·ªôi ng≈© Solar Analytics</strong></p>
                </div>
                
                <div class="footer">
                    <p>¬© 2024 Solar Analytics. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
                    <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
                </div>
            </div>
        </body>
        </html>
        `;
    }

    // Test email configuration
    async testConfiguration() {
        console.log('üß™ Testing email configuration...\n');
        
        for (const { name, transporter } of this.transporters) {
            try {
                console.log(`Testing ${name}...`);
                await transporter.verify();
                console.log(`‚úÖ ${name} configuration is valid`);
            } catch (error) {
                console.log(`‚ùå ${name} configuration failed: ${error.message}`);
            }
        }
    }
}

module.exports = new EmailServiceFallback();
