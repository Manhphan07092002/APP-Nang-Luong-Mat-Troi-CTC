require('dotenv').config({ path: __dirname + '/.env' });
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('./models/userModel');
const Achievement = require('./models/achievementModel');

async function setupAchievements() {
    try {
        console.log('üîå Connecting to MongoDB...');
        await mongoose.connect(process.env.MONGO_URI);
        console.log('‚úÖ MongoDB connected successfully');

        // Create or find admin user
        let adminUser = await User.findOne({ role: 'admin' });
        
        if (!adminUser) {
            console.log('üë§ Creating admin user...');
            const hashedPassword = await bcrypt.hash('admin123', 10);
            adminUser = new User({
                name: 'Admin User',
                email: 'admin@example.com',
                password: hashedPassword,
                role: 'admin',
                isActive: true
            });
            await adminUser.save();
            console.log('‚úÖ Admin user created: admin@example.com / admin123');
        } else {
            console.log('‚úÖ Admin user found:', adminUser.email);
        }

        // Create sample achievements
        const sampleAchievements = [
            {
                name: 'Ng∆∞·ªùi ti√™n phong Solar',
                description: 'Ho√†n th√†nh b√°o c√°o ph√¢n t√≠ch nƒÉng l∆∞·ª£ng m·∫∑t tr·ªùi ƒë·∫ßu ti√™n',
                category: 'solar',
                rarity: 'common',
                points: 50,
                icon: 'fas fa-sun',
                color: '#f59e0b',
                createdBy: adminUser._id
            },
            {
                name: 'Chuy√™n gia Solar',
                description: 'Ho√†n th√†nh 10 b√°o c√°o ph√¢n t√≠ch nƒÉng l∆∞·ª£ng m·∫∑t tr·ªùi',
                category: 'solar',
                rarity: 'uncommon',
                points: 150,
                icon: 'fas fa-solar-panel',
                color: '#f59e0b',
                createdBy: adminUser._id
            },
            {
                name: 'Ng∆∞·ªùi vi·∫øt b√°o c√°o',
                description: 'T·∫°o b√°o c√°o ƒë·∫ßu ti√™n trong h·ªá th·ªëng',
                category: 'reports',
                rarity: 'common',
                points: 25,
                icon: 'fas fa-file-alt',
                color: '#3b82f6',
                createdBy: adminUser._id
            },
            {
                name: 'Nh√† ph√¢n t√≠ch m·ªõi',
                description: 'Ho√†n th√†nh ph√¢n t√≠ch d·ªØ li·ªáu ƒë·∫ßu ti√™n',
                category: 'analysis',
                rarity: 'common',
                points: 40,
                icon: 'fas fa-chart-line',
                color: '#10b981',
                createdBy: adminUser._id
            },
            {
                name: 'Th√†nh vi√™n m·ªõi',
                description: 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi c·ªông ƒë·ªìng Solar Analytics!',
                category: 'community',
                rarity: 'common',
                points: 10,
                icon: 'fas fa-handshake',
                color: '#ec4899',
                createdBy: adminUser._id
            }
        ];

        // Clear and insert achievements
        await Achievement.deleteMany({});
        const achievements = await Achievement.insertMany(sampleAchievements);
        console.log(`üèÜ Created ${achievements.length} sample achievements`);

        // Generate JWT token for testing
        const token = jwt.sign(
            { _id: adminUser._id },
            process.env.JWT_SECRET,
            { expiresIn: '24h' }
        );

        console.log('\nüéØ API Testing Information:');
        console.log('Admin Login: admin@example.com / admin123');
        console.log('JWT Token for API calls:');
        console.log(`Bearer ${token}`);
        
        console.log('\nüìã Available API Endpoints:');
        console.log('GET /api/achievements/stats - Get achievement statistics');
        console.log('GET /api/achievements - Get all achievements (admin)');
        console.log('POST /api/achievements - Create new achievement (admin)');
        console.log('GET /api/achievements/leaderboard - Get leaderboard (public)');
        
        console.log('\n‚úÖ Setup completed successfully!');
        
    } catch (error) {
        console.error('‚ùå Error during setup:', error.message);
    } finally {
        await mongoose.disconnect();
        console.log('üîå Disconnected from MongoDB');
    }
}

setupAchievements();
